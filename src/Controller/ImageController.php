<?php

namespace App\Controller;

use App\Entity\Image;
use Twig\Environment;
use App\Form\ImageType;
use App\Repository\ImageRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\RequestStack;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\File\Exception\FileException;

class ImageController extends AbstractController
{
    public function __construct(private EntityManagerInterface $manager,
                                private Environment $environment)
    {
        
    }
    // public function index(ImageRepository $imageRepository): Response
    // {
    //     return $this->render('image/index.html.twig', [
    //         'images' => $imageRepository->findAll()
    //     ]);
    // }

    #[Route('/image/show/{id}', name: 'image_show', methods:['GET'])]
    public function showImage(ImageRepository $imageRepository,int $id): Response
    {
        $image = $imageRepository->find($id);
            
        if (!$image) {
            throw $this->createNotFoundException('Image not found');
        }
        return $this->render('image/index.html.twig', [
            'id' => $id,
            'image' => $image
        ]);
    }

    #[Route('/image/new/{id}', name: 'new_image', methods:['POST', 'GET'])]
    public function new(Request $request, $id, ImageRepository $imageRepository): Response
    {
        $image = new Image();
        $form = $this->createForm(ImageType::class, $image);
        $form->handleRequest($request);
    
        if ($form->isSubmitted() && $form->isValid()) {
            $entityManager = $this->getDoctrine()->getManager();
    
            //------------------Image Upload--------------//
            /** @var file $flie */
            $file = $form['image']->getData();
            if ($file) {
                $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();
    
    
                // Move the file to the directory where brochures are stored
                try {
                    $file->move(
                        $this->getParameter('thumbnails.upload_directory'), // in Service.yaml defined images directory
                        $fileName
                    );
                } catch (FileException $e) {
                    //..handle exception if something happens during file upload
                }
                $image->setImage($fileName);
            }
            //------------------Image Upload--------------//
            $entityManager->persist($image);
            $entityManager->flush();
    
            if ($request->isXmlHttpRequest()) {
                $response = array('success' => true, 'id' => $image->getId());
                return new JsonResponse($response);
            }
    
            return $this->redirectToRoute('new_image', ['id' => $id]);
        }
    
        $images = $imageRepository->findBy(['product' => $id]);
    
        return $this->render('image/index.html.twig', [
            'image' => $image,
            'id' => $id,
            'images' => $images,
            'form' => $form->createView(),
        ]);
    }
    
    
            // $images = $imagesRepository->findBy(['product' => $id]);
    
    // return $this->json('Le produit numeros '.$image->getId().' à été crée');
        // return $this->render('image/index.html.twig', [
            // 'image' => $image,
            // 'id' => $id,
        // ]);

    #[Route('/image/{id}', name: 'show_image', methods:'GET')]
    public function show(Image $image): Response
    {
        return $this->render('image/show.html.twig', [
            'image' => $image
        ]);
    }

    #[Route('/image/{id}', name: 'delete_image', methods:'DELETE')]
    public function delete($id): Response
    {
        $manager = $this->getDoctrine()->getManager();

        $image = $manager->getRepository(Image::class)->find($id);

        if (!$image){
            return $this->json('Pas de image trouvé'. $id, 404);
        }
        $manager->remove($image);
        $manager->flush();

        return $this->json('l\'image numeros '.$id.' effacé');
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    #[Route("/get-images/{id}", name: 'get-images', methods:['GET'])]
    public function getImage($id, ImageRepository $imageRepository): Response
    {
        $images = $imageRepository->findBy(['product' => $id]);
    
        $data = [];
        foreach ($images as $image) {
            $data[] = [
                'id' => $image->getId(),
                'title' => $image->getTitle(),
                'image' => $image->getImage()
            ];
        }
        // var_dump($data);

        return $this->json($data);
    }

}
